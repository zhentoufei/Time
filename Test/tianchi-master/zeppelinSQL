5   获取后十天每个艺术家的平均播放次数
sqlc.sql("select artist_id,DS,count(*) as cnt    from joind_artist_songs where DS>172 and DS<=182    group by artist_id,DS").registerTempTable("artist_ds_cnt")
%sql
select artist_id,avg(cnt) as AVG
from artist_ds_cnt
group by artist_id
order by artist_id
limit 10

4   获取某一首歌的走势
发现每一首歌曲的变化趋势都不一样
select song_id,DS,count(*)  as c from user_actions
where song_id="1689d15bfc70e7333db3081acef02a61"
group by song_id,DS
order by DS

3   利用sqlContext的sql方法实现过滤筛选
    val rs=sqlc.sql("select * from user_actions where from_unixtime(gmt_create,'yyyyMMdd') == DS ")
    rs.save("/home/wangtuntun/rs")
    这里的sqlc是启动zeppelin创建好的sqlcontext对象

2   dataframe读取和保存为parquet文件;dataframe的join和filte和重命名r;dataframe选择几列
val user_action_filter=df_user.filter("from_unixtime(1231323,'yyyyMMdd') = DS")
user_action_filter.write.save("/home/wangtuntun/AliMusic/Data/user_action_clean_parquet.parquet")
val join=df_user.join( df,df("song_id")===df_user("song_id") )
val join_rename=join.toDF("user_id","song_id_1","gmt_create","action_type","DS","song_id_2","artist_id","publish_time","song_init_plays_new","Language","Gender")
val join_filter=join_rename.filter("from_unixtime(gmt_create,'yyyyMMdd') < publish_time")
val songs_only=join_filter.select("song_id_2","artist_id","publish_time","song_init_plays_new","Language","Gender").write.save("/home/wangtuntun/AliMusic/Data/songs_clean_parquet.parquet")
1   读取数据注册表
case class Song(song_id:String,artist_id:String,publish_time:String,song_init_plays:String,Language:String,Gender:String)

val data=sc.textFile("/home/wangtuntun/AliMusic/Data/mars_tianchi_songs.csv")

val data2=data.map(_.split(","))

val data3=data2.map( x=>Song( x(0),x(1),x(2),x(3),x(4),x(5) ) )

val df=data3.toDF()

df.registerTempTable("songs")


case class user_action(user_id:String,song_id:String,gmt_create:String,action_type:String,DS:String)

val data_user=sc.textFile("/home/wangtuntun/AliMusic/Data/mars_tianchi_user_actions.csv")

val data_user_2=data_user.map(_.split(","))

val data_user_3=data_user_2.map( x=>user_action( x(0),x(1),x(2),x(3),x(4) ) )

val df_user=data_user_3.toDF()

df_user.registerTempTable("user_actions")
